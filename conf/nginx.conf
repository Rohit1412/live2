worker_processes  7;
error_log /var/log/nginx/error.log warn;  # Reduced from debug to warn for better performance
events {
    worker_connections  1024;
    use epoll;  # Linux optimization for better performance
    multi_accept on;  # Accept multiple connections at once
}
# RTMP configuration
rtmp {
    server {
    listen 1935; # Listen on standard RTMP port
    chunk_size 1000;  # Reduced chunk size for lower latency
    ping 30s;
    ping_timeout 1s;
    # ping 30s;
    # notify_method get;
    # This application is to accept incoming stream
    application live {
      live on; # Allows live input
      # for each received stream, transcode for adaptive streaming
      # This single ffmpeg command takes the input and transforms
      # the source into 5 different streams with different bitrates
      # and qualities. # these settings respect the aspect ratio.
      # OPTIMIZED: Reduced to 3 quality levels for lower CPU usage and latency
      exec_push  /usr/local/bin/ffmpeg -i rtmp://localhost:1935/$app/$name -async 1 -vsync -1
            #-c:v libx264 -c:a aac -b:v 400k  -b:a 64k  -vf "scale=640:360"  -tune zerolatency -preset ultrafast -crf 28 -g 90 -keyint_min 90 -sc_threshold 0 -force_key_frames "expr:gte(t,n_forced*3)" -f flv rtmp://localhost:1935/show/$name_low
            -c:v libx264 -preset veryfast -tune zerolatency -x264-params "keyint=30:min-keyint=30:scenecut=0" -b:v 10M -maxrate 10M -bufsize 20M -vf "scale=3840:2160" -c:a aac -b:a 128k -f flv rtmp://localhost:1935/show/$name_4k
                #2k
            -c:v libx264 -preset veryfast -tune zerolatency -x264-params "keyint=30:min-keyint=30:scenecut=0" -b:v 5M -maxrate 5M -bufsize 10M -vf "scale=2560:1440" -c:a aac -b:a 128k -f flv rtmp://localhost:1935/show/$name_2k
                #1080p
            -c:v libx264 -preset veryfast -tune zerolatency -x264-params "keyint=30:min-keyint=30:scenecut=0" -b:v 2M -maxrate 2M -bufsize 4M -vf "scale=1920:1080" -c:a aac -b:a 128k -f flv rtmp://localhost:1935/show/$name_1080;
          }
    # This is the HLS application - FIXED FOR SEGMENT SYNC ISSUES
    application show {
      live on; # Allows live input from above application
      deny play all; # disable consuming the stream from nginx as rtmp
      hls on; # Enable HTTP Live Streaming
      hls_fragment 2s; # 3 seconds for more stable segments
      hls_playlist_length 10; # Increased to 10 segments (30 seconds buffer) to prevent expiration
      hls_path /mnt/hls/;  # hls fragments path
      hls_cleanup on; # Auto cleanup old segments
      #hls_sync 500ms; # Sync segments every 100ms - DISABLED FOR PERFORMANCE
      hls_continuous on; # Ensure continuous segment generation
      hls_nested off; # Disable for simpler URL structure
      #hls_allow_cache on; # Allow caching for better performance
      # OPTIMIZED: Only 3 quality variants instead of 6
     # hls_variant _low BANDWIDTH=500000 RESOLUTION=640x360;
      hls_variant _4k BANDWIDTH=600000 RESOLUTION=3840x2160;
      hls_variant _2k BANDWIDTH=1400000 RESOLUTION=2560x1440;
      hls_variant _1080 BANDWIDTH=2500000 RESOLUTION=1920x1080;     


      # MPEG-DASH - OPTIMIZED
      dash off;
      dash_path /mnt/dash/;  # dash fragments path
      dash_fragment 1; # 1 second fragments
      dash_playlist_length 5; # Reduced playlist length
      dash_cleanup on; # Auto cleanup old segments
    }
  }
}
http {
  # OPTIMIZED HTTP settings for low latency streaming
  sendfile on;  # Enable sendfile for better performance
  tcp_nopush on;
  tcp_nodelay on;  # Enable for lower latency (was incorrectly set to off)
  keepalive_timeout 65;
  keepalive_requests 100;

  # Buffer optimizations
  client_body_buffer_size 128k;
  client_max_body_size 10m;
  client_header_buffer_size 1k;
  large_client_header_buffers 4 4k;
  output_buffers 1 32k;
  postpone_output 1460;
  # HTTP server required to serve the player and HLS fragments
  server {
    listen 8080;
    # Serve HLS fragments
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      root /mnt;
      add_header Cache-Control "max-age=5, cache"; # Minimal caching for live streams
      # CORS setup
      add_header 'Access-Control-Allow-Origin' '*' always;
      add_header 'Access-Control-Expose-Headers' 'Content-Length';
      # allow CORS preflight requests
      if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Max-Age' 1728000;
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        add_header 'Content-Length' 0;
        return 204;
      }
    }
        # Serve DASH fragments
        location /dash {
            types {
                application/dash+xml mpd;
                video/mp4 mp4;
            }
      root /mnt;
      add_header Cache-Control "max-age=1, no-cache"; # Minimal caching for live streams
            # CORS setup
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # Allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }    
    # This URL provides RTMP statistics in XML
    location /stat {
      rtmp_stat all;
      rtmp_stat_stylesheet stat.xsl; # Use stat.xsl stylesheet 
    }
    location /stat.xsl {
      # XML stylesheet to view RTMP stats.
      root /usr/local/nginx/html;
    }
  }
}
